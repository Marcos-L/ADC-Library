
ADC Library Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003590  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003758  08003758  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003758  08003758  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003758  08003758  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800376c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800376c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c26f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afd  00000000  00000000  0002c2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b90  00000000  00000000  0002f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afea  00000000  00000000  00055cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f45b6  00000000  00000000  00060cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155290  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  001552e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003700 	.word	0x08003700

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003700 	.word	0x08003700

080001c8 <AnalogRead>:
		break;
	default:
		break;
	}
}
int AnalogRead(ADC_HandleTypeDef hadc1){
 80001c8:	b084      	sub	sp, #16
 80001ca:	b580      	push	{r7, lr}
 80001cc:	b082      	sub	sp, #8
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	f107 0c10 	add.w	ip, r7, #16
 80001d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_ADC_Start(&hadc1);
 80001d8:	f107 0010 	add.w	r0, r7, #16
 80001dc:	f000 fe12 	bl	8000e04 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80001e0:	f04f 31ff 	mov.w	r1, #4294967295
 80001e4:	f107 0010 	add.w	r0, r7, #16
 80001e8:	f000 fec6 	bl	8000f78 <HAL_ADC_PollForConversion>
	int Data = HAL_ADC_GetValue(&hadc1);
 80001ec:	f107 0010 	add.w	r0, r7, #16
 80001f0:	f000 ff9a 	bl	8001128 <HAL_ADC_GetValue>
 80001f4:	4603      	mov	r3, r0
 80001f6:	607b      	str	r3, [r7, #4]
	return Data;
 80001f8:	687b      	ldr	r3, [r7, #4]
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b590      	push	{r4, r7, lr}
 800020a:	b099      	sub	sp, #100	; 0x64
 800020c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020e:	f000 fa26 	bl	800065e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000212:	f000 f819 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000216:	f000 f903 	bl	8000420 <MX_GPIO_Init>
  MX_ADC1_Init();
 800021a:	f000 f88b 	bl	8000334 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 Data=AnalogRead(hadc1);
 800021e:	4c09      	ldr	r4, [pc, #36]	; (8000244 <main+0x3c>)
 8000220:	4668      	mov	r0, sp
 8000222:	f104 0310 	add.w	r3, r4, #16
 8000226:	2254      	movs	r2, #84	; 0x54
 8000228:	4619      	mov	r1, r3
 800022a:	f003 fa53 	bl	80036d4 <memcpy>
 800022e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000232:	f7ff ffc9 	bl	80001c8 <AnalogRead>
 8000236:	4603      	mov	r3, r0
 8000238:	80fb      	strh	r3, [r7, #6]
	 HAL_Delay(1);
 800023a:	2001      	movs	r0, #1
 800023c:	f000 fa84 	bl	8000748 <HAL_Delay>
	 Data=AnalogRead(hadc1);
 8000240:	e7ed      	b.n	800021e <main+0x16>
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b0b8      	sub	sp, #224	; 0xe0
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000252:	2244      	movs	r2, #68	; 0x44
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fa4a 	bl	80036f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	463b      	mov	r3, r7
 800026e:	2288      	movs	r2, #136	; 0x88
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 fa3c 	bl	80036f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000278:	2310      	movs	r3, #16
 800027a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800028a:	2360      	movs	r3, #96	; 0x60
 800028c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000290:	2300      	movs	r3, #0
 8000292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800029a:	4618      	mov	r0, r3
 800029c:	f001 ff86 	bl	80021ac <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002a6:	f000 f8ed 	bl	8000484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002b0:	2300      	movs	r3, #0
 80002b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fb52 	bl	8002978 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002da:	f000 f8d3 	bl	8000484 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002e8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002ea:	2301      	movs	r3, #1
 80002ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80002f2:	2308      	movs	r3, #8
 80002f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002f6:	2307      	movs	r3, #7
 80002f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002fe:	2302      	movs	r3, #2
 8000300:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000306:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000308:	463b      	mov	r3, r7
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fd02 	bl	8002d14 <HAL_RCCEx_PeriphCLKConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000316:	f000 f8b5 	bl	8000484 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800031a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800031e:	f001 feef 	bl	8002100 <HAL_PWREx_ControlVoltageScaling>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000328:	f000 f8ac 	bl	8000484 <Error_Handler>
  }
}
 800032c:	bf00      	nop
 800032e:	37e0      	adds	r7, #224	; 0xe0
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b08a      	sub	sp, #40	; 0x28
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800033a:	f107 031c 	add.w	r3, r7, #28
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
 8000354:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000356:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <MX_ADC1_Init+0xe0>)
 8000358:	4a2f      	ldr	r2, [pc, #188]	; (8000418 <MX_ADC1_Init+0xe4>)
 800035a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035c:	4b2d      	ldr	r3, [pc, #180]	; (8000414 <MX_ADC1_Init+0xe0>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000362:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <MX_ADC1_Init+0xe0>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000368:	4b2a      	ldr	r3, [pc, #168]	; (8000414 <MX_ADC1_Init+0xe0>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <MX_ADC1_Init+0xe0>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <MX_ADC1_Init+0xe0>)
 8000376:	2204      	movs	r2, #4
 8000378:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037a:	4b26      	ldr	r3, [pc, #152]	; (8000414 <MX_ADC1_Init+0xe0>)
 800037c:	2200      	movs	r2, #0
 800037e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000380:	4b24      	ldr	r3, [pc, #144]	; (8000414 <MX_ADC1_Init+0xe0>)
 8000382:	2200      	movs	r2, #0
 8000384:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000386:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_ADC1_Init+0xe0>)
 8000388:	2201      	movs	r2, #1
 800038a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038c:	4b21      	ldr	r3, [pc, #132]	; (8000414 <MX_ADC1_Init+0xe0>)
 800038e:	2200      	movs	r2, #0
 8000390:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <MX_ADC1_Init+0xe0>)
 8000396:	2200      	movs	r2, #0
 8000398:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <MX_ADC1_Init+0xe0>)
 800039c:	2200      	movs	r2, #0
 800039e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <MX_ADC1_Init+0xe0>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a8:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_ADC1_Init+0xe0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <MX_ADC1_Init+0xe0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b6:	4817      	ldr	r0, [pc, #92]	; (8000414 <MX_ADC1_Init+0xe0>)
 80003b8:	f000 fbce 	bl	8000b58 <HAL_ADC_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80003c2:	f000 f85f 	bl	8000484 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003ca:	f107 031c 	add.w	r3, r7, #28
 80003ce:	4619      	mov	r1, r3
 80003d0:	4810      	ldr	r0, [pc, #64]	; (8000414 <MX_ADC1_Init+0xe0>)
 80003d2:	f001 fb2f 	bl	8001a34 <HAL_ADCEx_MultiModeConfigChannel>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003dc:	f000 f852 	bl	8000484 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_ADC1_Init+0xe8>)
 80003e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e4:	2306      	movs	r3, #6
 80003e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ec:	237f      	movs	r3, #127	; 0x7f
 80003ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f0:	2304      	movs	r3, #4
 80003f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_ADC1_Init+0xe0>)
 80003fe:	f000 fea1 	bl	8001144 <HAL_ADC_ConfigChannel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000408:	f000 f83c 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	3728      	adds	r7, #40	; 0x28
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000028 	.word	0x20000028
 8000418:	50040000 	.word	0x50040000
 800041c:	14f00020 	.word	0x14f00020

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_GPIO_Init+0x60>)
 8000436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000438:	4a11      	ldr	r2, [pc, #68]	; (8000480 <MX_GPIO_Init+0x60>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_GPIO_Init+0x60>)
 8000442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f001 fe2d 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800045a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000468:	2300      	movs	r3, #0
 800046a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4619      	mov	r1, r3
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f001 fc74 	bl	8001d60 <HAL_GPIO_Init>

}
 8000478:	bf00      	nop
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	e7fe      	b.n	800048c <Error_Handler+0x8>
	...

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x44>)
 8000498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_MspInit+0x44>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6613      	str	r3, [r2, #96]	; 0x60
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_MspInit+0x44>)
 80004a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <HAL_MspInit+0x44>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <HAL_MspInit+0x44>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b8:	6593      	str	r3, [r2, #88]	; 0x58
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_MspInit+0x44>)
 80004bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a15      	ldr	r2, [pc, #84]	; (800054c <HAL_ADC_MspInit+0x74>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d124      	bne.n	8000544 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_ADC_MspInit+0x78>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a14      	ldr	r2, [pc, #80]	; (8000550 <HAL_ADC_MspInit+0x78>)
 8000500:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_ADC_MspInit+0x78>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_ADC_MspInit+0x78>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_ADC_MspInit+0x78>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_ADC_MspInit+0x78>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800052a:	2301      	movs	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800052e:	230b      	movs	r3, #11
 8000530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4619      	mov	r1, r3
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f001 fc0e 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3728      	adds	r7, #40	; 0x28
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	50040000 	.word	0x50040000
 8000550:	40021000 	.word	0x40021000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a0:	f000 f8b2 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <SystemInit+0x5c>)
 80005ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <SystemInit+0x5c>)
 80005b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <SystemInit+0x60>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a11      	ldr	r2, [pc, #68]	; (8000608 <SystemInit+0x60>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <SystemInit+0x60>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <SystemInit+0x60>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <SystemInit+0x60>)
 80005d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <SystemInit+0x60>)
 80005e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <SystemInit+0x60>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <SystemInit+0x60>)
 80005ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <SystemInit+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	40021000 	.word	0x40021000

0800060c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800060c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000644 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000610:	f7ff ffca 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000614:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000616:	e003      	b.n	8000620 <LoopCopyDataInit>

08000618 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800061a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800061c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800061e:	3104      	adds	r1, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000624:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000626:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000628:	d3f6      	bcc.n	8000618 <CopyDataInit>
	ldr	r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopForever+0x12>)
	b	LoopFillZerobss
 800062c:	e002      	b.n	8000634 <LoopFillZerobss>

0800062e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800062e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000630:	f842 3b04 	str.w	r3, [r2], #4

08000634 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <LoopForever+0x16>)
	cmp	r2, r3
 8000636:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000638:	d3f9      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063a:	f003 f827 	bl	800368c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800063e:	f7ff fde3 	bl	8000208 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000644:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000648:	08003760 	.word	0x08003760
	ldr	r0, =_sdata
 800064c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000650:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000654:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000658:	20000090 	.word	0x20000090

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>

0800065e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000664:	2300      	movs	r3, #0
 8000666:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f001 fb45 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f80e 	bl	8000690 <HAL_InitTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	e001      	b.n	8000684 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000680:	f7ff ff06 	bl	8000490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000684:	79fb      	ldrb	r3, [r7, #7]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_InitTick+0x6c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d023      	beq.n	80006ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <HAL_InitTick+0x70>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_InitTick+0x6c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fb43 	bl	8001d46 <HAL_SYSTICK_Config>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d10f      	bne.n	80006e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d809      	bhi.n	80006e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	2200      	movs	r2, #0
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f001 fb1b 	bl	8001d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d8:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <HAL_InitTick+0x74>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
 80006de:	e007      	b.n	80006f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	e004      	b.n	80006f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	73fb      	strb	r3, [r7, #15]
 80006ea:	e001      	b.n	80006f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000000 	.word	0x20000000
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_IncTick+0x20>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_IncTick+0x24>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_IncTick+0x24>)
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000008 	.word	0x20000008
 800072c:	2000008c 	.word	0x2000008c

08000730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <HAL_GetTick+0x14>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	2000008c 	.word	0x2000008c

08000748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000750:	f7ff ffee 	bl	8000730 <HAL_GetTick>
 8000754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000760:	d005      	beq.n	800076e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_Delay+0x44>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800076e:	bf00      	nop
 8000770:	f7ff ffde 	bl	8000730 <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	429a      	cmp	r2, r3
 800077e:	d8f7      	bhi.n	8000770 <HAL_Delay+0x28>
  {
  }
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008

08000790 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	431a      	orrs	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	609a      	str	r2, [r3, #8]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	431a      	orrs	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	609a      	str	r2, [r3, #8]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3360      	adds	r3, #96	; 0x60
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <LL_ADC_SetOffset+0x44>)
 800081a:	4013      	ands	r3, r2
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	430a      	orrs	r2, r1
 8000826:	4313      	orrs	r3, r2
 8000828:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000830:	bf00      	nop
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	03fff000 	.word	0x03fff000

08000840 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3360      	adds	r3, #96	; 0x60
 800084e:	461a      	mov	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3360      	adds	r3, #96	; 0x60
 800087c:	461a      	mov	r2, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	431a      	orrs	r2, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000896:	bf00      	nop
 8000898:	371c      	adds	r7, #28
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d101      	bne.n	80008ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3330      	adds	r3, #48	; 0x30
 80008d8:	461a      	mov	r2, r3
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	f003 030c 	and.w	r3, r3, #12
 80008e4:	4413      	add	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	f003 031f 	and.w	r3, r3, #31
 80008f2:	211f      	movs	r1, #31
 80008f4:	fa01 f303 	lsl.w	r3, r1, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	401a      	ands	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	0e9b      	lsrs	r3, r3, #26
 8000900:	f003 011f 	and.w	r1, r3, #31
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	431a      	orrs	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000914:	bf00      	nop
 8000916:	371c      	adds	r7, #28
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000920:	b480      	push	{r7}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3314      	adds	r3, #20
 8000930:	461a      	mov	r2, r3
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	0e5b      	lsrs	r3, r3, #25
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	4413      	add	r3, r2
 800093e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	0d1b      	lsrs	r3, r3, #20
 8000948:	f003 031f 	and.w	r3, r3, #31
 800094c:	2107      	movs	r1, #7
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	401a      	ands	r2, r3
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	0d1b      	lsrs	r3, r3, #20
 800095a:	f003 031f 	and.w	r3, r3, #31
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	431a      	orrs	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800096a:	bf00      	nop
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000990:	43db      	mvns	r3, r3
 8000992:	401a      	ands	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0318 	and.w	r3, r3, #24
 800099a:	4908      	ldr	r1, [pc, #32]	; (80009bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800099c:	40d9      	lsrs	r1, r3
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	400b      	ands	r3, r1
 80009a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80009a6:	431a      	orrs	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	0007ffff 	.word	0x0007ffff

080009c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f003 031f 	and.w	r3, r3, #31
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000a08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	6093      	str	r3, [r2, #8]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a30:	d101      	bne.n	8000a36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a80:	d101      	bne.n	8000a86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000aa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa8:	f043 0201 	orr.w	r2, r3, #1
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d101      	bne.n	8000ad4 <LL_ADC_IsEnabled+0x18>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <LL_ADC_IsEnabled+0x1a>
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000af6:	f043 0204 	orr.w	r2, r3, #4
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d101      	bne.n	8000b22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d101      	bne.n	8000b48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e136      	b.n	8000de0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d109      	bne.n	8000b94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fca9 	bl	80004d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff3f 	bl	8000a1c <LL_ADC_IsDeepPowerDownEnabled>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d004      	beq.n	8000bae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff25 	bl	80009f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff5a 	bl	8000a6c <LL_ADC_IsInternalRegulatorEnabled>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d115      	bne.n	8000bea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff3e 	bl	8000a44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000bc8:	4b87      	ldr	r3, [pc, #540]	; (8000de8 <HAL_ADC_Init+0x290>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	099b      	lsrs	r3, r3, #6
 8000bce:	4a87      	ldr	r2, [pc, #540]	; (8000dec <HAL_ADC_Init+0x294>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	099b      	lsrs	r3, r3, #6
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000bdc:	e002      	b.n	8000be4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f9      	bne.n	8000bde <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff3c 	bl	8000a6c <LL_ADC_IsInternalRegulatorEnabled>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10d      	bne.n	8000c16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bfe:	f043 0210 	orr.w	r2, r3, #16
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	f043 0201 	orr.w	r2, r3, #1
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff75 	bl	8000b0a <LL_ADC_REG_IsConversionOngoing>
 8000c20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 80cf 	bne.w	8000dce <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 80cb 	bne.w	8000dce <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c3c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c40:	f043 0202 	orr.w	r2, r3, #2
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff35 	bl	8000abc <LL_ADC_IsEnabled>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d115      	bne.n	8000c84 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c58:	4865      	ldr	r0, [pc, #404]	; (8000df0 <HAL_ADC_Init+0x298>)
 8000c5a:	f7ff ff2f 	bl	8000abc <LL_ADC_IsEnabled>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4864      	ldr	r0, [pc, #400]	; (8000df4 <HAL_ADC_Init+0x29c>)
 8000c62:	f7ff ff2b 	bl	8000abc <LL_ADC_IsEnabled>
 8000c66:	4603      	mov	r3, r0
 8000c68:	431c      	orrs	r4, r3
 8000c6a:	4863      	ldr	r0, [pc, #396]	; (8000df8 <HAL_ADC_Init+0x2a0>)
 8000c6c:	f7ff ff26 	bl	8000abc <LL_ADC_IsEnabled>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4323      	orrs	r3, r4
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	485f      	ldr	r0, [pc, #380]	; (8000dfc <HAL_ADC_Init+0x2a4>)
 8000c80:	f7ff fd86 	bl	8000790 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7e5b      	ldrb	r3, [r3, #25]
 8000c88:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c8e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000c94:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000c9a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d106      	bne.n	8000cc0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	045b      	lsls	r3, r3, #17
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d009      	beq.n	8000cdc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <HAL_ADC_Init+0x2a8>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	69b9      	ldr	r1, [r7, #24]
 8000cec:	430b      	orrs	r3, r1
 8000cee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff08 	bl	8000b0a <LL_ADC_REG_IsConversionOngoing>
 8000cfa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff15 	bl	8000b30 <LL_ADC_INJ_IsConversionOngoing>
 8000d06:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d13d      	bne.n	8000d8a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d13a      	bne.n	8000d8a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d18:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d20:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d30:	f023 0302 	bic.w	r3, r3, #2
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	69b9      	ldr	r1, [r7, #24]
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d118      	bne.n	8000d7a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000d52:	f023 0304 	bic.w	r3, r3, #4
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d5e:	4311      	orrs	r1, r2
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000d64:	4311      	orrs	r1, r2
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0201 	orr.w	r2, r2, #1
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	e007      	b.n	8000d8a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	691a      	ldr	r2, [r3, #16]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0201 	bic.w	r2, r2, #1
 8000d88:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d10c      	bne.n	8000dac <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f023 010f 	bic.w	r1, r3, #15
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
 8000daa:	e007      	b.n	8000dbc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 020f 	bic.w	r2, r2, #15
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc0:	f023 0303 	bic.w	r3, r3, #3
 8000dc4:	f043 0201 	orr.w	r2, r3, #1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	655a      	str	r2, [r3, #84]	; 0x54
 8000dcc:	e007      	b.n	8000dde <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd2:	f043 0210 	orr.w	r2, r3, #16
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000dde:	7ffb      	ldrb	r3, [r7, #31]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3724      	adds	r7, #36	; 0x24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	20000000 	.word	0x20000000
 8000dec:	053e2d63 	.word	0x053e2d63
 8000df0:	50040000 	.word	0x50040000
 8000df4:	50040100 	.word	0x50040100
 8000df8:	50040200 	.word	0x50040200
 8000dfc:	50040300 	.word	0x50040300
 8000e00:	fff0c007 	.word	0xfff0c007

08000e04 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000e0c:	4857      	ldr	r0, [pc, #348]	; (8000f6c <HAL_ADC_Start+0x168>)
 8000e0e:	f7ff fdd7 	bl	80009c0 <LL_ADC_GetMultimode>
 8000e12:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe76 	bl	8000b0a <LL_ADC_REG_IsConversionOngoing>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 809c 	bne.w	8000f5e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <HAL_ADC_Start+0x30>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e097      	b.n	8000f64 <HAL_ADC_Start+0x160>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 fd71 	bl	8001924 <ADC_Enable>
 8000e42:	4603      	mov	r3, r0
 8000e44:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f040 8083 	bne.w	8000f54 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e56:	f023 0301 	bic.w	r3, r3, #1
 8000e5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a42      	ldr	r2, [pc, #264]	; (8000f70 <HAL_ADC_Start+0x16c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d002      	beq.n	8000e72 <HAL_ADC_Start+0x6e>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	e000      	b.n	8000e74 <HAL_ADC_Start+0x70>
 8000e72:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <HAL_ADC_Start+0x170>)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d002      	beq.n	8000e82 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d105      	bne.n	8000e8e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e9a:	d106      	bne.n	8000eaa <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	f023 0206 	bic.w	r2, r3, #6
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8000ea8:	e002      	b.n	8000eb0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	221c      	movs	r2, #28
 8000eb6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <HAL_ADC_Start+0x16c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d002      	beq.n	8000ed0 <HAL_ADC_Start+0xcc>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	e000      	b.n	8000ed2 <HAL_ADC_Start+0xce>
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <HAL_ADC_Start+0x170>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d008      	beq.n	8000eec <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	d002      	beq.n	8000eec <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	2b09      	cmp	r3, #9
 8000eea:	d114      	bne.n	8000f16 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000efe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fde7 	bl	8000ae2 <LL_ADC_REG_StartConversion>
 8000f14:	e025      	b.n	8000f62 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <HAL_ADC_Start+0x16c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d002      	beq.n	8000f32 <HAL_ADC_Start+0x12e>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	e000      	b.n	8000f34 <HAL_ADC_Start+0x130>
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_ADC_Start+0x170>)
 8000f34:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00f      	beq.n	8000f62 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54
 8000f52:	e006      	b.n	8000f62 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000f5c:	e001      	b.n	8000f62 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	50040300 	.word	0x50040300
 8000f70:	50040100 	.word	0x50040100
 8000f74:	50040000 	.word	0x50040000

08000f78 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f82:	4866      	ldr	r0, [pc, #408]	; (800111c <HAL_ADC_PollForConversion+0x1a4>)
 8000f84:	f7ff fd1c 	bl	80009c0 <LL_ADC_GetMultimode>
 8000f88:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d102      	bne.n	8000f98 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f92:	2308      	movs	r3, #8
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e02a      	b.n	8000fee <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d002      	beq.n	8000faa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b09      	cmp	r3, #9
 8000fa8:	d111      	bne.n	8000fce <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d007      	beq.n	8000fc8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fbc:	f043 0220 	orr.w	r2, r3, #32
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0a4      	b.n	8001112 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000fc8:	2304      	movs	r3, #4
 8000fca:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000fcc:	e00f      	b.n	8000fee <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000fce:	4853      	ldr	r0, [pc, #332]	; (800111c <HAL_ADC_PollForConversion+0x1a4>)
 8000fd0:	f7ff fd04 	bl	80009dc <LL_ADC_GetMultiDMATransfer>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fde:	f043 0220 	orr.w	r2, r3, #32
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e093      	b.n	8001112 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000fea:	2304      	movs	r3, #4
 8000fec:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fee:	f7ff fb9f 	bl	8000730 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000ff4:	e021      	b.n	800103a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d01d      	beq.n	800103a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000ffe:	f7ff fb97 	bl	8000730 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d302      	bcc.n	8001014 <HAL_ADC_PollForConversion+0x9c>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d112      	bne.n	800103a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10b      	bne.n	800103a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001026:	f043 0204 	orr.w	r2, r3, #4
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e06b      	b.n	8001112 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	4013      	ands	r3, r2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0d6      	beq.n	8000ff6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fc22 	bl	80008a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01c      	beq.n	800109e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7e5b      	ldrb	r3, [r3, #25]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d118      	bne.n	800109e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b08      	cmp	r3, #8
 8001078:	d111      	bne.n	800109e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <HAL_ADC_PollForConversion+0x1a8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d002      	beq.n	80010ae <HAL_ADC_PollForConversion+0x136>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	e000      	b.n	80010b0 <HAL_ADC_PollForConversion+0x138>
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_ADC_PollForConversion+0x1ac>)
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d008      	beq.n	80010ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d002      	beq.n	80010ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b09      	cmp	r3, #9
 80010c8:	d104      	bne.n	80010d4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	e00c      	b.n	80010ee <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <HAL_ADC_PollForConversion+0x1a8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d002      	beq.n	80010e4 <HAL_ADC_PollForConversion+0x16c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	e000      	b.n	80010e6 <HAL_ADC_PollForConversion+0x16e>
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_ADC_PollForConversion+0x1ac>)
 80010e6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d104      	bne.n	80010fe <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2208      	movs	r2, #8
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e008      	b.n	8001110 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d103      	bne.n	8001110 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	220c      	movs	r2, #12
 800110e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	50040300 	.word	0x50040300
 8001120:	50040100 	.word	0x50040100
 8001124:	50040000 	.word	0x50040000

08001128 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0b6      	sub	sp, #216	; 0xd8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x22>
 8001162:	2302      	movs	r3, #2
 8001164:	e3c7      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x7b2>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fcc9 	bl	8000b0a <LL_ADC_REG_IsConversionOngoing>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 83a8 	bne.w	80018d0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b05      	cmp	r3, #5
 8001186:	d824      	bhi.n	80011d2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	3b02      	subs	r3, #2
 800118e:	2b03      	cmp	r3, #3
 8001190:	d81b      	bhi.n	80011ca <HAL_ADC_ConfigChannel+0x86>
 8001192:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <HAL_ADC_ConfigChannel+0x54>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011b1 	.word	0x080011b1
 80011a0:	080011b9 	.word	0x080011b9
 80011a4:	080011c1 	.word	0x080011c1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	220c      	movs	r2, #12
 80011ac:	605a      	str	r2, [r3, #4]
          break;
 80011ae:	e011      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2212      	movs	r2, #18
 80011b4:	605a      	str	r2, [r3, #4]
          break;
 80011b6:	e00d      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2218      	movs	r2, #24
 80011bc:	605a      	str	r2, [r3, #4]
          break;
 80011be:	e009      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c6:	605a      	str	r2, [r3, #4]
          break;
 80011c8:	e004      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2206      	movs	r2, #6
 80011ce:	605a      	str	r2, [r3, #4]
          break;
 80011d0:	e000      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80011d2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	f7ff fb71 	bl	80008c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fc8d 	bl	8000b0a <LL_ADC_REG_IsConversionOngoing>
 80011f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fc99 	bl	8000b30 <LL_ADC_INJ_IsConversionOngoing>
 80011fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001202:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 81a6 	bne.w	8001558 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800120c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 81a1 	bne.w	8001558 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	6819      	ldr	r1, [r3, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	461a      	mov	r2, r3
 8001224:	f7ff fb7c 	bl	8000920 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	695a      	ldr	r2, [r3, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d00a      	beq.n	8001260 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6919      	ldr	r1, [r3, #16]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800125a:	f7ff facd 	bl	80007f8 <LL_ADC_SetOffset>
 800125e:	e17b      	b.n	8001558 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff faea 	bl	8000840 <LL_ADC_GetOffsetChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10a      	bne.n	800128c <HAL_ADC_ConfigChannel+0x148>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fadf 	bl	8000840 <LL_ADC_GetOffsetChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	0e9b      	lsrs	r3, r3, #26
 8001286:	f003 021f 	and.w	r2, r3, #31
 800128a:	e01e      	b.n	80012ca <HAL_ADC_ConfigChannel+0x186>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fad4 	bl	8000840 <LL_ADC_GetOffsetChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80012ba:	2320      	movs	r3, #32
 80012bc:	e004      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80012be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x19e>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0e9b      	lsrs	r3, r3, #26
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	e018      	b.n	8001314 <HAL_ADC_ConfigChannel+0x1d0>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80012f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80012fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001306:	2320      	movs	r3, #32
 8001308:	e004      	b.n	8001314 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800130a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001314:	429a      	cmp	r2, r3
 8001316:	d106      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff faa3 	bl	800086c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2101      	movs	r1, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fa87 	bl	8000840 <LL_ADC_GetOffsetChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10a      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x20e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fa7c 	bl	8000840 <LL_ADC_GetOffsetChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	0e9b      	lsrs	r3, r3, #26
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	e01e      	b.n	8001390 <HAL_ADC_ConfigChannel+0x24c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2101      	movs	r1, #1
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fa71 	bl	8000840 <LL_ADC_GetOffsetChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001378:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001380:	2320      	movs	r3, #32
 8001382:	e004      	b.n	800138e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x264>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0e9b      	lsrs	r3, r3, #26
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	e018      	b.n	80013da <HAL_ADC_ConfigChannel+0x296>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80013bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80013c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80013cc:	2320      	movs	r3, #32
 80013ce:	e004      	b.n	80013da <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80013d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013d4:	fab3 f383 	clz	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013da:	429a      	cmp	r2, r3
 80013dc:	d106      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fa40 	bl	800086c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2102      	movs	r1, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fa24 	bl	8000840 <LL_ADC_GetOffsetChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10a      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x2d4>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fa19 	bl	8000840 <LL_ADC_GetOffsetChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	0e9b      	lsrs	r3, r3, #26
 8001412:	f003 021f 	and.w	r2, r3, #31
 8001416:	e01e      	b.n	8001456 <HAL_ADC_ConfigChannel+0x312>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2102      	movs	r1, #2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fa0e 	bl	8000840 <LL_ADC_GetOffsetChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001436:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800143a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800143e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001446:	2320      	movs	r3, #32
 8001448:	e004      	b.n	8001454 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800144a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <HAL_ADC_ConfigChannel+0x32a>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	0e9b      	lsrs	r3, r3, #26
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	e016      	b.n	800149c <HAL_ADC_ConfigChannel+0x358>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001480:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800148e:	2320      	movs	r3, #32
 8001490:	e004      	b.n	800149c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800149c:	429a      	cmp	r2, r3
 800149e:	d106      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	2102      	movs	r1, #2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f9df 	bl	800086c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2103      	movs	r1, #3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f9c3 	bl	8000840 <LL_ADC_GetOffsetChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10a      	bne.n	80014da <HAL_ADC_ConfigChannel+0x396>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2103      	movs	r1, #3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f9b8 	bl	8000840 <LL_ADC_GetOffsetChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	0e9b      	lsrs	r3, r3, #26
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	e017      	b.n	800150a <HAL_ADC_ConfigChannel+0x3c6>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2103      	movs	r1, #3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f9ad 	bl	8000840 <LL_ADC_GetOffsetChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80014f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80014f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80014fc:	2320      	movs	r3, #32
 80014fe:	e003      	b.n	8001508 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <HAL_ADC_ConfigChannel+0x3de>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0e9b      	lsrs	r3, r3, #26
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	e011      	b.n	8001546 <HAL_ADC_ConfigChannel+0x402>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001532:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800153a:	2320      	movs	r3, #32
 800153c:	e003      	b.n	8001546 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800153e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001546:	429a      	cmp	r2, r3
 8001548:	d106      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	2103      	movs	r1, #3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f98a 	bl	800086c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff faad 	bl	8000abc <LL_ADC_IsEnabled>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 813f 	bne.w	80017e8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	461a      	mov	r2, r3
 8001578:	f7ff f9fe 	bl	8000978 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a8e      	ldr	r2, [pc, #568]	; (80017bc <HAL_ADC_ConfigChannel+0x678>)
 8001582:	4293      	cmp	r3, r2
 8001584:	f040 8130 	bne.w	80017e8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10b      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x46c>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0e9b      	lsrs	r3, r3, #26
 800159e:	3301      	adds	r3, #1
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	bf94      	ite	ls
 80015a8:	2301      	movls	r3, #1
 80015aa:	2300      	movhi	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	e019      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x4a0>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b8:	fa93 f3a3 	rbit	r3, r3
 80015bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80015be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80015c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80015c8:	2320      	movs	r3, #32
 80015ca:	e003      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80015cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	2b09      	cmp	r3, #9
 80015dc:	bf94      	ite	ls
 80015de:	2301      	movls	r3, #1
 80015e0:	2300      	movhi	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d079      	beq.n	80016dc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x4c0>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0e9b      	lsrs	r3, r3, #26
 80015fa:	3301      	adds	r3, #1
 80015fc:	069b      	lsls	r3, r3, #26
 80015fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001602:	e015      	b.n	8001630 <HAL_ADC_ConfigChannel+0x4ec>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001614:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800161c:	2320      	movs	r3, #32
 800161e:	e003      	b.n	8001628 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	069b      	lsls	r3, r3, #26
 800162c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x50c>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0e9b      	lsrs	r3, r3, #26
 8001642:	3301      	adds	r3, #1
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	e017      	b.n	8001680 <HAL_ADC_ConfigChannel+0x53c>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800165e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001660:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001668:	2320      	movs	r3, #32
 800166a:	e003      	b.n	8001674 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800166c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800166e:	fab3 f383 	clz	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	ea42 0103 	orr.w	r1, r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10a      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x562>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0e9b      	lsrs	r3, r3, #26
 8001696:	3301      	adds	r3, #1
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	051b      	lsls	r3, r3, #20
 80016a4:	e018      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x594>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80016b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80016be:	2320      	movs	r3, #32
 80016c0:	e003      	b.n	80016ca <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80016c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016d8:	430b      	orrs	r3, r1
 80016da:	e080      	b.n	80017de <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d107      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x5b4>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0e9b      	lsrs	r3, r3, #26
 80016ee:	3301      	adds	r3, #1
 80016f0:	069b      	lsls	r3, r3, #26
 80016f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016f6:	e015      	b.n	8001724 <HAL_ADC_ConfigChannel+0x5e0>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001710:	2320      	movs	r3, #32
 8001712:	e003      	b.n	800171c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	3301      	adds	r3, #1
 800171e:	069b      	lsls	r3, r3, #26
 8001720:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172c:	2b00      	cmp	r3, #0
 800172e:	d109      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x600>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0e9b      	lsrs	r3, r3, #26
 8001736:	3301      	adds	r3, #1
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	e017      	b.n	8001774 <HAL_ADC_ConfigChannel+0x630>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	fa93 f3a3 	rbit	r3, r3
 8001750:	61fb      	str	r3, [r7, #28]
  return result;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800175c:	2320      	movs	r3, #32
 800175e:	e003      	b.n	8001768 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	3301      	adds	r3, #1
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	ea42 0103 	orr.w	r1, r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x65c>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0e9b      	lsrs	r3, r3, #26
 800178a:	3301      	adds	r3, #1
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	3b1e      	subs	r3, #30
 8001798:	051b      	lsls	r3, r3, #20
 800179a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800179e:	e01d      	b.n	80017dc <HAL_ADC_ConfigChannel+0x698>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	613b      	str	r3, [r7, #16]
  return result;
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80017b8:	2320      	movs	r3, #32
 80017ba:	e005      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x684>
 80017bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3301      	adds	r3, #1
 80017ca:	f003 021f 	and.w	r2, r3, #31
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	3b1e      	subs	r3, #30
 80017d6:	051b      	lsls	r3, r3, #20
 80017d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017dc:	430b      	orrs	r3, r1
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	6892      	ldr	r2, [r2, #8]
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f89c 	bl	8000920 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_ADC_ConfigChannel+0x7bc>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d07a      	beq.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017f4:	4843      	ldr	r0, [pc, #268]	; (8001904 <HAL_ADC_ConfigChannel+0x7c0>)
 80017f6:	f7fe fff1 	bl	80007dc <LL_ADC_GetCommonPathInternalCh>
 80017fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a41      	ldr	r2, [pc, #260]	; (8001908 <HAL_ADC_ConfigChannel+0x7c4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d12c      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800180c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d126      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a3c      	ldr	r2, [pc, #240]	; (800190c <HAL_ADC_ConfigChannel+0x7c8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d004      	beq.n	8001828 <HAL_ADC_ConfigChannel+0x6e4>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a3b      	ldr	r2, [pc, #236]	; (8001910 <HAL_ADC_ConfigChannel+0x7cc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d15d      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800182c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001830:	4619      	mov	r1, r3
 8001832:	4834      	ldr	r0, [pc, #208]	; (8001904 <HAL_ADC_ConfigChannel+0x7c0>)
 8001834:	f7fe ffbf 	bl	80007b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_ADC_ConfigChannel+0x7d0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	099b      	lsrs	r3, r3, #6
 800183e:	4a36      	ldr	r2, [pc, #216]	; (8001918 <HAL_ADC_ConfigChannel+0x7d4>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	099b      	lsrs	r3, r3, #6
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001852:	e002      	b.n	800185a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f9      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001860:	e040      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2d      	ldr	r2, [pc, #180]	; (800191c <HAL_ADC_ConfigChannel+0x7d8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d118      	bne.n	800189e <HAL_ADC_ConfigChannel+0x75a>
 800186c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d112      	bne.n	800189e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <HAL_ADC_ConfigChannel+0x7c8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d004      	beq.n	800188c <HAL_ADC_ConfigChannel+0x748>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_ADC_ConfigChannel+0x7cc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d12d      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800188c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001894:	4619      	mov	r1, r3
 8001896:	481b      	ldr	r0, [pc, #108]	; (8001904 <HAL_ADC_ConfigChannel+0x7c0>)
 8001898:	f7fe ff8d 	bl	80007b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800189c:	e024      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <HAL_ADC_ConfigChannel+0x7dc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d120      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d11a      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_ADC_ConfigChannel+0x7c8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d115      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018c6:	4619      	mov	r1, r3
 80018c8:	480e      	ldr	r0, [pc, #56]	; (8001904 <HAL_ADC_ConfigChannel+0x7c0>)
 80018ca:	f7fe ff74 	bl	80007b6 <LL_ADC_SetCommonPathInternalCh>
 80018ce:	e00c      	b.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f043 0220 	orr.w	r2, r3, #32
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80018e2:	e002      	b.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018e4:	bf00      	nop
 80018e6:	e000      	b.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80018f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	37d8      	adds	r7, #216	; 0xd8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	80080000 	.word	0x80080000
 8001904:	50040300 	.word	0x50040300
 8001908:	c7520000 	.word	0xc7520000
 800190c:	50040000 	.word	0x50040000
 8001910:	50040200 	.word	0x50040200
 8001914:	20000000 	.word	0x20000000
 8001918:	053e2d63 	.word	0x053e2d63
 800191c:	cb840000 	.word	0xcb840000
 8001920:	80000001 	.word	0x80000001

08001924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff f8c3 	bl	8000abc <LL_ADC_IsEnabled>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d14d      	bne.n	80019d8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <ADC_Enable+0xc0>)
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00d      	beq.n	8001966 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f043 0210 	orr.w	r2, r3, #16
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e039      	b.n	80019da <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f892 	bl	8000a94 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001970:	f7fe fede 	bl	8000730 <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001976:	e028      	b.n	80019ca <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f89d 	bl	8000abc <LL_ADC_IsEnabled>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d104      	bne.n	8001992 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f881 	bl	8000a94 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001992:	f7fe fecd 	bl	8000730 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d914      	bls.n	80019ca <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d00d      	beq.n	80019ca <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b2:	f043 0210 	orr.w	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e007      	b.n	80019da <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d1cf      	bne.n	8001978 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	8000003f 	.word	0x8000003f

080019e8 <LL_ADC_IsEnabled>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <LL_ADC_IsEnabled+0x18>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <LL_ADC_IsEnabled+0x1a>
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_REG_IsConversionOngoing>:
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d101      	bne.n	8001a26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b09f      	sub	sp, #124	; 0x7c
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e093      	b.n	8001b7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a47      	ldr	r2, [pc, #284]	; (8001b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001a6c:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	e001      	b.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10b      	bne.n	8001a94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a80:	f043 0220 	orr.w	r2, r3, #32
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e072      	b.n	8001b7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ffb9 	bl	8001a0e <LL_ADC_REG_IsConversionOngoing>
 8001a9c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ffb3 	bl	8001a0e <LL_ADC_REG_IsConversionOngoing>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d154      	bne.n	8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d151      	bne.n	8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ab4:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d02c      	beq.n	8001b1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ad2:	035b      	lsls	r3, r3, #13
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ada:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001adc:	4829      	ldr	r0, [pc, #164]	; (8001b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ade:	f7ff ff83 	bl	80019e8 <LL_ADC_IsEnabled>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4828      	ldr	r0, [pc, #160]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ae6:	f7ff ff7f 	bl	80019e8 <LL_ADC_IsEnabled>
 8001aea:	4603      	mov	r3, r0
 8001aec:	431c      	orrs	r4, r3
 8001aee:	4828      	ldr	r0, [pc, #160]	; (8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001af0:	f7ff ff7a 	bl	80019e8 <LL_ADC_IsEnabled>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4323      	orrs	r3, r4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d137      	bne.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b04:	f023 030f 	bic.w	r3, r3, #15
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	6811      	ldr	r1, [r2, #0]
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	6892      	ldr	r2, [r2, #8]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	431a      	orrs	r2, r3
 8001b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b18:	e028      	b.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b26:	4817      	ldr	r0, [pc, #92]	; (8001b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b28:	f7ff ff5e 	bl	80019e8 <LL_ADC_IsEnabled>
 8001b2c:	4604      	mov	r4, r0
 8001b2e:	4816      	ldr	r0, [pc, #88]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b30:	f7ff ff5a 	bl	80019e8 <LL_ADC_IsEnabled>
 8001b34:	4603      	mov	r3, r0
 8001b36:	431c      	orrs	r4, r3
 8001b38:	4815      	ldr	r0, [pc, #84]	; (8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001b3a:	f7ff ff55 	bl	80019e8 <LL_ADC_IsEnabled>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4323      	orrs	r3, r4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d112      	bne.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b4e:	f023 030f 	bic.w	r3, r3, #15
 8001b52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b54:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b56:	e009      	b.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001b6a:	e000      	b.n	8001b6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	377c      	adds	r7, #124	; 0x7c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	50040000 	.word	0x50040000
 8001b88:	50040100 	.word	0x50040100
 8001b8c:	50040300 	.word	0x50040300
 8001b90:	50040200 	.word	0x50040200

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff47 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff5c 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffb0 	bl	8001cb4 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6e:	e17f      	b.n	8002070 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2101      	movs	r1, #1
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8171 	beq.w	800206a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d00b      	beq.n	8001da8 <HAL_GPIO_Init+0x48>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d007      	beq.n	8001da8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d9c:	2b11      	cmp	r3, #17
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b12      	cmp	r3, #18
 8001da6:	d130      	bne.n	8001e0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dde:	2201      	movs	r2, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 0201 	and.w	r2, r3, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d118      	bne.n	8001e48 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	f003 0201 	and.w	r2, r3, #1
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x128>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b12      	cmp	r3, #18
 8001e86:	d123      	bne.n	8001ed0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	08da      	lsrs	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3208      	adds	r2, #8
 8001e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	08da      	lsrs	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3208      	adds	r2, #8
 8001eca:	6939      	ldr	r1, [r7, #16]
 8001ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80ac 	beq.w	800206a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <HAL_GPIO_Init+0x330>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	4a5e      	ldr	r2, [pc, #376]	; (8002090 <HAL_GPIO_Init+0x330>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1e:	4b5c      	ldr	r3, [pc, #368]	; (8002090 <HAL_GPIO_Init+0x330>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f2a:	4a5a      	ldr	r2, [pc, #360]	; (8002094 <HAL_GPIO_Init+0x334>)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f54:	d025      	beq.n	8001fa2 <HAL_GPIO_Init+0x242>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4f      	ldr	r2, [pc, #316]	; (8002098 <HAL_GPIO_Init+0x338>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01f      	beq.n	8001f9e <HAL_GPIO_Init+0x23e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4e      	ldr	r2, [pc, #312]	; (800209c <HAL_GPIO_Init+0x33c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0x23a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4d      	ldr	r2, [pc, #308]	; (80020a0 <HAL_GPIO_Init+0x340>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0x236>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_GPIO_Init+0x344>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00d      	beq.n	8001f92 <HAL_GPIO_Init+0x232>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4b      	ldr	r2, [pc, #300]	; (80020a8 <HAL_GPIO_Init+0x348>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x22e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4a      	ldr	r2, [pc, #296]	; (80020ac <HAL_GPIO_Init+0x34c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_Init+0x22a>
 8001f86:	2306      	movs	r3, #6
 8001f88:	e00c      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	e00a      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f8e:	2305      	movs	r3, #5
 8001f90:	e008      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f92:	2304      	movs	r3, #4
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f96:	2303      	movs	r3, #3
 8001f98:	e004      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x244>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	f002 0203 	and.w	r2, r2, #3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4093      	lsls	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fb4:	4937      	ldr	r1, [pc, #220]	; (8002094 <HAL_GPIO_Init+0x334>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_GPIO_Init+0x350>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fe6:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <HAL_GPIO_Init+0x350>)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_GPIO_Init+0x350>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_GPIO_Init+0x350>)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_GPIO_Init+0x350>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_GPIO_Init+0x350>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_GPIO_Init+0x350>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002064:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <HAL_GPIO_Init+0x350>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	f47f ae78 	bne.w	8001d70 <HAL_GPIO_Init+0x10>
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000
 8002098:	48000400 	.word	0x48000400
 800209c:	48000800 	.word	0x48000800
 80020a0:	48000c00 	.word	0x48000c00
 80020a4:	48001000 	.word	0x48001000
 80020a8:	48001400 	.word	0x48001400
 80020ac:	48001800 	.word	0x48001800
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_PWREx_GetVoltageRange+0x18>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40007000 	.word	0x40007000

08002100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210e:	d130      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800211c:	d038      	beq.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002126:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002128:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2232      	movs	r2, #50	; 0x32
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0c9b      	lsrs	r3, r3, #18
 8002140:	3301      	adds	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002144:	e002      	b.n	800214c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3b01      	subs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002158:	d102      	bne.n	8002160 <HAL_PWREx_ControlVoltageScaling+0x60>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f2      	bne.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216c:	d110      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e00f      	b.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217e:	d007      	beq.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002188:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000
 80021a4:	20000000 	.word	0x20000000
 80021a8:	431bde83 	.word	0x431bde83

080021ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e3d4      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021be:	4ba1      	ldr	r3, [pc, #644]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c8:	4b9e      	ldr	r3, [pc, #632]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80e4 	beq.w	80023a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <HAL_RCC_OscConfig+0x4a>
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b0c      	cmp	r3, #12
 80021ea:	f040 808b 	bne.w	8002304 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 8087 	bne.w	8002304 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f6:	4b93      	ldr	r3, [pc, #588]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x62>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e3ac      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	4b8c      	ldr	r3, [pc, #560]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <HAL_RCC_OscConfig+0x7c>
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002226:	e005      	b.n	8002234 <HAL_RCC_OscConfig+0x88>
 8002228:	4b86      	ldr	r3, [pc, #536]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002234:	4293      	cmp	r3, r2
 8002236:	d223      	bcs.n	8002280 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fd09 	bl	8002c54 <RCC_SetFlashLatencyFromMSIRange>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e38d      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224c:	4b7d      	ldr	r3, [pc, #500]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a7c      	ldr	r2, [pc, #496]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b7a      	ldr	r3, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4977      	ldr	r1, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800226a:	4b76      	ldr	r3, [pc, #472]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	4972      	ldr	r1, [pc, #456]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
 800227e:	e025      	b.n	80022cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002280:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6f      	ldr	r2, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002286:	f043 0308 	orr.w	r3, r3, #8
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	496a      	ldr	r1, [pc, #424]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229e:	4b69      	ldr	r3, [pc, #420]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	4965      	ldr	r1, [pc, #404]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fcc9 	bl	8002c54 <RCC_SetFlashLatencyFromMSIRange>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e34d      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022cc:	f000 fc36 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	495a      	ldr	r1, [pc, #360]	; (8002448 <HAL_RCC_OscConfig+0x29c>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x2a0>)
 80022ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022ec:	4b58      	ldr	r3, [pc, #352]	; (8002450 <HAL_RCC_OscConfig+0x2a4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f9cd 	bl	8000690 <HAL_InitTick>
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d052      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	e331      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d032      	beq.n	8002372 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800230c:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002318:	f7fe fa0a 	bl	8000730 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002320:	f7fe fa06 	bl	8000730 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e31a      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002332:	4b44      	ldr	r3, [pc, #272]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233e:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	493b      	ldr	r1, [pc, #236]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235c:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	4936      	ldr	r1, [pc, #216]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
 8002370:	e01a      	b.n	80023a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002372:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a33      	ldr	r2, [pc, #204]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800237e:	f7fe f9d7 	bl	8000730 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002386:	f7fe f9d3 	bl	8000730 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e2e7      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f0      	bne.n	8002386 <HAL_RCC_OscConfig+0x1da>
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d074      	beq.n	800249e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x21a>
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d10e      	bne.n	80023de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d10b      	bne.n	80023de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c6:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d064      	beq.n	800249c <HAL_RCC_OscConfig+0x2f0>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d160      	bne.n	800249c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e2c4      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x24a>
 80023e8:	4b16      	ldr	r3, [pc, #88]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a15      	ldr	r2, [pc, #84]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e01d      	b.n	8002432 <HAL_RCC_OscConfig+0x286>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fe:	d10c      	bne.n	800241a <HAL_RCC_OscConfig+0x26e>
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e00b      	b.n	8002432 <HAL_RCC_OscConfig+0x286>
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a06      	ldr	r2, [pc, #24]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800242c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01c      	beq.n	8002474 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe f979 	bl	8000730 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002440:	e011      	b.n	8002466 <HAL_RCC_OscConfig+0x2ba>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	08003718 	.word	0x08003718
 800244c:	20000000 	.word	0x20000000
 8002450:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe f96c 	bl	8000730 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e280      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002466:	4baf      	ldr	r3, [pc, #700]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x2a8>
 8002472:	e014      	b.n	800249e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe f95c 	bl	8000730 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe f958 	bl	8000730 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e26c      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248e:	4ba5      	ldr	r3, [pc, #660]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x2d0>
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d060      	beq.n	800256c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_OscConfig+0x310>
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d119      	bne.n	80024ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d116      	bne.n	80024ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024bc:	4b99      	ldr	r3, [pc, #612]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_OscConfig+0x328>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e249      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b93      	ldr	r3, [pc, #588]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	4990      	ldr	r1, [pc, #576]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e8:	e040      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d023      	beq.n	800253a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f2:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a8b      	ldr	r2, [pc, #556]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe f917 	bl	8000730 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe f913 	bl	8000730 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e227      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002518:	4b82      	ldr	r3, [pc, #520]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	497c      	ldr	r1, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
 8002538:	e018      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253a:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a79      	ldr	r2, [pc, #484]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe f8f3 	bl	8000730 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7fe f8ef 	bl	8000730 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e203      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002560:	4b70      	ldr	r3, [pc, #448]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01c      	beq.n	80025ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002580:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002586:	4a67      	ldr	r2, [pc, #412]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe f8ce 	bl	8000730 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7fe f8ca 	bl	8000730 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1de      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025aa:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80025ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ef      	beq.n	8002598 <HAL_RCC_OscConfig+0x3ec>
 80025b8:	e01b      	b.n	80025f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ba:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80025bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c0:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe f8b1 	bl	8000730 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe f8ad 	bl	8000730 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1c1      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e4:	4b4f      	ldr	r3, [pc, #316]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80025e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ef      	bne.n	80025d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80a6 	beq.w	800274c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002604:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b44      	ldr	r3, [pc, #272]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4a43      	ldr	r2, [pc, #268]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261a:	6593      	str	r3, [r2, #88]	; 0x58
 800261c:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002628:	2301      	movs	r3, #1
 800262a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	4b3e      	ldr	r3, [pc, #248]	; (8002728 <HAL_RCC_OscConfig+0x57c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d118      	bne.n	800266a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_OscConfig+0x57c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <HAL_RCC_OscConfig+0x57c>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002644:	f7fe f874 	bl	8000730 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe f870 	bl	8000730 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e184      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265e:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_RCC_OscConfig+0x57c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <HAL_RCC_OscConfig+0x4d8>
 8002672:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002682:	e024      	b.n	80026ce <HAL_RCC_OscConfig+0x522>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d110      	bne.n	80026ae <HAL_RCC_OscConfig+0x502>
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a24      	ldr	r2, [pc, #144]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a20      	ldr	r2, [pc, #128]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ac:	e00f      	b.n	80026ce <HAL_RCC_OscConfig+0x522>
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	4a17      	ldr	r2, [pc, #92]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026c6:	f023 0304 	bic.w	r3, r3, #4
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe f82b 	bl	8000730 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe f827 	bl	8000730 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e139      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ed      	beq.n	80026de <HAL_RCC_OscConfig+0x532>
 8002702:	e01a      	b.n	800273a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe f814 	bl	8000730 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270a:	e00f      	b.n	800272c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe f810 	bl	8000730 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d906      	bls.n	800272c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e122      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800272c:	4b90      	ldr	r3, [pc, #576]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e8      	bne.n	800270c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4b8b      	ldr	r3, [pc, #556]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	4a8a      	ldr	r2, [pc, #552]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8108 	beq.w	8002966 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	2b02      	cmp	r3, #2
 800275c:	f040 80d0 	bne.w	8002900 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002760:	4b83      	ldr	r3, [pc, #524]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	429a      	cmp	r2, r3
 8002772:	d130      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	3b01      	subs	r3, #1
 8002780:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d127      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d11f      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027a0:	2a07      	cmp	r2, #7
 80027a2:	bf14      	ite	ne
 80027a4:	2201      	movne	r2, #1
 80027a6:	2200      	moveq	r2, #0
 80027a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d113      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	3b01      	subs	r3, #1
 80027d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d06e      	beq.n	80028b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d069      	beq.n	80028b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027dc:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027e8:	4b61      	ldr	r3, [pc, #388]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b7      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027f8:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a5c      	ldr	r2, [pc, #368]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80027fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002804:	f7fd ff94 	bl	8000730 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7fd ff90 	bl	8000730 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0a4      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281e:	4b54      	ldr	r3, [pc, #336]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282a:	4b51      	ldr	r3, [pc, #324]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b51      	ldr	r3, [pc, #324]	; (8002974 <HAL_RCC_OscConfig+0x7c8>)
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800283a:	3a01      	subs	r2, #1
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002844:	0212      	lsls	r2, r2, #8
 8002846:	4311      	orrs	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800284c:	0852      	lsrs	r2, r2, #1
 800284e:	3a01      	subs	r2, #1
 8002850:	0552      	lsls	r2, r2, #21
 8002852:	4311      	orrs	r1, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002858:	0852      	lsrs	r2, r2, #1
 800285a:	3a01      	subs	r2, #1
 800285c:	0652      	lsls	r2, r2, #25
 800285e:	4311      	orrs	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002864:	0912      	lsrs	r2, r2, #4
 8002866:	0452      	lsls	r2, r2, #17
 8002868:	430a      	orrs	r2, r1
 800286a:	4941      	ldr	r1, [pc, #260]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002870:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3e      	ldr	r2, [pc, #248]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800287c:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a3b      	ldr	r2, [pc, #236]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002886:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002888:	f7fd ff52 	bl	8000730 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7fd ff4e 	bl	8000730 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e062      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a2:	4b33      	ldr	r3, [pc, #204]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ae:	e05a      	b.n	8002966 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e059      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b4:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d152      	bne.n	8002966 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028cc:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d8:	f7fd ff2a 	bl	8000730 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fd ff26 	bl	8000730 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e03a      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x734>
 80028fe:	e032      	b.n	8002966 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d02d      	beq.n	8002962 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 800290c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002910:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002912:	4b17      	ldr	r3, [pc, #92]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d105      	bne.n	800292a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002924:	f023 0303 	bic.w	r3, r3, #3
 8002928:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002930:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002938:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fd fef9 	bl	8000730 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002942:	f7fd fef5 	bl	8000730 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e009      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_OscConfig+0x7c4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCC_OscConfig+0x796>
 8002960:	e001      	b.n	8002966 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	f99d808c 	.word	0xf99d808c

08002978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0c8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b66      	ldr	r3, [pc, #408]	; (8002b28 <HAL_RCC_ClockConfig+0x1b0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d910      	bls.n	80029bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_ClockConfig+0x1b0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 0207 	bic.w	r2, r3, #7
 80029a2:	4961      	ldr	r1, [pc, #388]	; (8002b28 <HAL_RCC_ClockConfig+0x1b0>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b5f      	ldr	r3, [pc, #380]	; (8002b28 <HAL_RCC_ClockConfig+0x1b0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0b0      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d04c      	beq.n	8002a62 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d0:	4b56      	ldr	r3, [pc, #344]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d121      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e09e      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d115      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e092      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a00:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e086      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a10:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e07e      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a20:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 0203 	bic.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	493f      	ldr	r1, [pc, #252]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a32:	f7fd fe7d 	bl	8000730 <HAL_GetTick>
 8002a36:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a38:	e00a      	b.n	8002a50 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3a:	f7fd fe79 	bl	8000730 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e066      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 020c 	and.w	r2, r3, #12
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d1eb      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	492c      	ldr	r1, [pc, #176]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_RCC_ClockConfig+0x1b0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d210      	bcs.n	8002ab0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_RCC_ClockConfig+0x1b0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 0207 	bic.w	r2, r3, #7
 8002a96:	4924      	ldr	r1, [pc, #144]	; (8002b28 <HAL_RCC_ClockConfig+0x1b0>)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_ClockConfig+0x1b0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e036      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4918      	ldr	r1, [pc, #96]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4910      	ldr	r1, [pc, #64]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aee:	f000 f825 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002af2:	4602      	mov	r2, r0
 8002af4:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_RCC_ClockConfig+0x1b4>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	490c      	ldr	r1, [pc, #48]	; (8002b30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	5ccb      	ldrb	r3, [r1, r3]
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fdbc 	bl	8000690 <HAL_InitTick>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	08003718 	.word	0x08003718
 8002b34:	20000000 	.word	0x20000000
 8002b38:	20000004 	.word	0x20000004

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	; 0x24
 8002b40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b54:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x34>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d121      	bne.n	8002bae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d11e      	bne.n	8002bae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b70:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b7c:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e005      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b98:	4a2b      	ldr	r2, [pc, #172]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d102      	bne.n	8002bba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	e004      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc0:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d134      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bca:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d003      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0xac>
 8002be0:	e005      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002be4:	617b      	str	r3, [r7, #20]
      break;
 8002be6:	e005      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bea:	617b      	str	r3, [r7, #20]
      break;
 8002bec:	e002      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	617b      	str	r3, [r7, #20]
      break;
 8002bf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	3301      	adds	r3, #1
 8002c00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	fb02 f203 	mul.w	r2, r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	0e5b      	lsrs	r3, r3, #25
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	3301      	adds	r3, #1
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c34:	69bb      	ldr	r3, [r7, #24]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	08003728 	.word	0x08003728
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c60:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c6c:	f7ff fa3a 	bl	80020e4 <HAL_PWREx_GetVoltageRange>
 8002c70:	6178      	str	r0, [r7, #20]
 8002c72:	e014      	b.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c8c:	f7ff fa2a 	bl	80020e4 <HAL_PWREx_GetVoltageRange>
 8002c90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d10b      	bne.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d919      	bls.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2ba0      	cmp	r3, #160	; 0xa0
 8002cb0:	d902      	bls.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	e013      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb8:	2301      	movs	r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	e010      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d902      	bls.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	e00a      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b80      	cmp	r3, #128	; 0x80
 8002cce:	d102      	bne.n	8002cd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	e004      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b70      	cmp	r3, #112	; 0x70
 8002cda:	d101      	bne.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cdc:	2301      	movs	r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 0207 	bic.w	r2, r3, #7
 8002ce8:	4909      	ldr	r1, [pc, #36]	; (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40022000 	.word	0x40022000

08002d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d20:	2300      	movs	r3, #0
 8002d22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d041      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d38:	d02a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d3e:	d824      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d44:	d008      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d4a:	d81e      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d54:	d010      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d56:	e018      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d58:	4b86      	ldr	r3, [pc, #536]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a85      	ldr	r2, [pc, #532]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d64:	e015      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fabb 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d76:	e00c      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fba6 	bl	80034d0 <RCCEx_PLLSAI2_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d88:	e003      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d8e:	e000      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d98:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da6:	4973      	ldr	r1, [pc, #460]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dae:	e001      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d041      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dc8:	d02a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002dca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dce:	d824      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dda:	d81e      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de4:	d010      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002de6:	e018      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002de8:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a61      	ldr	r2, [pc, #388]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002df4:	e015      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fa73 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e06:	e00c      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fb5e 	bl	80034d0 <RCCEx_PLLSAI2_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e18:	e003      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e1e:	e000      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e28:	4b52      	ldr	r3, [pc, #328]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e36:	494f      	ldr	r1, [pc, #316]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e3e:	e001      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80a0 	beq.w	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	4a40      	ldr	r2, [pc, #256]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e76:	6593      	str	r3, [r2, #88]	; 0x58
 8002e78:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e88:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3a      	ldr	r2, [pc, #232]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e94:	f7fd fc4c 	bl	8000730 <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e9a:	e009      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fd fc48 	bl	8000730 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d902      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	74fb      	strb	r3, [r7, #19]
        break;
 8002eae:	e005      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eb0:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ef      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d15c      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ec2:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ecc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01f      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d019      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fd fc07 	bl	8000730 <HAL_GetTick>
 8002f22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f24:	e00b      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fd fc03 	bl	8000730 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d902      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002f3c:	e006      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ec      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f62:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f6a:	e009      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
 8002f70:	e006      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7c:	7cfb      	ldrb	r3, [r7, #19]
 8002f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f80:	7c7b      	ldrb	r3, [r7, #17]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b9e      	ldr	r3, [pc, #632]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	4a9d      	ldr	r2, [pc, #628]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f9e:	4b98      	ldr	r3, [pc, #608]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f023 0203 	bic.w	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	4994      	ldr	r1, [pc, #592]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fc0:	4b8f      	ldr	r3, [pc, #572]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f023 020c 	bic.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	498c      	ldr	r1, [pc, #560]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fe2:	4b87      	ldr	r3, [pc, #540]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	4983      	ldr	r1, [pc, #524]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003004:	4b7e      	ldr	r3, [pc, #504]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	497b      	ldr	r1, [pc, #492]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003026:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	4972      	ldr	r1, [pc, #456]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003048:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	496a      	ldr	r1, [pc, #424]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800306a:	4b65      	ldr	r3, [pc, #404]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	4961      	ldr	r1, [pc, #388]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800308c:	4b5c      	ldr	r3, [pc, #368]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309a:	4959      	ldr	r1, [pc, #356]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ae:	4b54      	ldr	r3, [pc, #336]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030bc:	4950      	ldr	r1, [pc, #320]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d0:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	4948      	ldr	r1, [pc, #288]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	493f      	ldr	r1, [pc, #252]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d028      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003114:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003122:	4937      	ldr	r1, [pc, #220]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003132:	d106      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a31      	ldr	r2, [pc, #196]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313e:	60d3      	str	r3, [r2, #12]
 8003140:	e011      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314a:	d10c      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3304      	adds	r3, #4
 8003150:	2101      	movs	r1, #1
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f8c8 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d028      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	491f      	ldr	r1, [pc, #124]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003190:	d106      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800319c:	60d3      	str	r3, [r2, #12]
 800319e:	e011      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f899 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d02b      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	4908      	ldr	r1, [pc, #32]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ee:	d109      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a02      	ldr	r2, [pc, #8]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031fa:	60d3      	str	r3, [r2, #12]
 80031fc:	e014      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800320c:	d10c      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	2101      	movs	r1, #1
 8003214:	4618      	mov	r0, r3
 8003216:	f000 f867 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02f      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003242:	4928      	ldr	r1, [pc, #160]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003252:	d10d      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	2102      	movs	r1, #2
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f844 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d014      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	74bb      	strb	r3, [r7, #18]
 800326e:	e011      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003278:	d10c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3320      	adds	r3, #32
 800327e:	2102      	movs	r1, #2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f925 	bl	80034d0 <RCCEx_PLLSAI2_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ae:	490d      	ldr	r1, [pc, #52]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d2:	4904      	ldr	r1, [pc, #16]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032da:	7cbb      	ldrb	r3, [r7, #18]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000

080032e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032f6:	4b75      	ldr	r3, [pc, #468]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d018      	beq.n	8003334 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003302:	4b72      	ldr	r3, [pc, #456]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0203 	and.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d10d      	bne.n	800332e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
       ||
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800331a:	4b6c      	ldr	r3, [pc, #432]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
       ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d047      	beq.n	80033be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e044      	b.n	80033be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d018      	beq.n	800336e <RCCEx_PLLSAI1_Config+0x86>
 800333c:	2b03      	cmp	r3, #3
 800333e:	d825      	bhi.n	800338c <RCCEx_PLLSAI1_Config+0xa4>
 8003340:	2b01      	cmp	r3, #1
 8003342:	d002      	beq.n	800334a <RCCEx_PLLSAI1_Config+0x62>
 8003344:	2b02      	cmp	r3, #2
 8003346:	d009      	beq.n	800335c <RCCEx_PLLSAI1_Config+0x74>
 8003348:	e020      	b.n	800338c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800334a:	4b60      	ldr	r3, [pc, #384]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d11d      	bne.n	8003392 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800335a:	e01a      	b.n	8003392 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800335c:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003364:	2b00      	cmp	r3, #0
 8003366:	d116      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336c:	e013      	b.n	8003396 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800336e:	4b57      	ldr	r3, [pc, #348]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10f      	bne.n	800339a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800338a:	e006      	b.n	800339a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      break;
 8003390:	e004      	b.n	800339c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003392:	bf00      	nop
 8003394:	e002      	b.n	800339c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003396:	bf00      	nop
 8003398:	e000      	b.n	800339c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800339a:	bf00      	nop
    }

    if(status == HAL_OK)
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10d      	bne.n	80033be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033a2:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	430b      	orrs	r3, r1
 80033b8:	4944      	ldr	r1, [pc, #272]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d17d      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a40      	ldr	r2, [pc, #256]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d0:	f7fd f9ae 	bl	8000730 <HAL_GetTick>
 80033d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033d6:	e009      	b.n	80033ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d8:	f7fd f9aa 	bl	8000730 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d902      	bls.n	80033ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	73fb      	strb	r3, [r7, #15]
        break;
 80033ea:	e005      	b.n	80033f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033ec:	4b37      	ldr	r3, [pc, #220]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ef      	bne.n	80033d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d160      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d111      	bne.n	8003428 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800340c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6892      	ldr	r2, [r2, #8]
 8003414:	0211      	lsls	r1, r2, #8
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68d2      	ldr	r2, [r2, #12]
 800341a:	0912      	lsrs	r2, r2, #4
 800341c:	0452      	lsls	r2, r2, #17
 800341e:	430a      	orrs	r2, r1
 8003420:	492a      	ldr	r1, [pc, #168]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	610b      	str	r3, [r1, #16]
 8003426:	e027      	b.n	8003478 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d112      	bne.n	8003454 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800342e:	4b27      	ldr	r3, [pc, #156]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003436:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6892      	ldr	r2, [r2, #8]
 800343e:	0211      	lsls	r1, r2, #8
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6912      	ldr	r2, [r2, #16]
 8003444:	0852      	lsrs	r2, r2, #1
 8003446:	3a01      	subs	r2, #1
 8003448:	0552      	lsls	r2, r2, #21
 800344a:	430a      	orrs	r2, r1
 800344c:	491f      	ldr	r1, [pc, #124]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	610b      	str	r3, [r1, #16]
 8003452:	e011      	b.n	8003478 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800345c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6892      	ldr	r2, [r2, #8]
 8003464:	0211      	lsls	r1, r2, #8
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6952      	ldr	r2, [r2, #20]
 800346a:	0852      	lsrs	r2, r2, #1
 800346c:	3a01      	subs	r2, #1
 800346e:	0652      	lsls	r2, r2, #25
 8003470:	430a      	orrs	r2, r1
 8003472:	4916      	ldr	r1, [pc, #88]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003478:	4b14      	ldr	r3, [pc, #80]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a13      	ldr	r2, [pc, #76]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800347e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fd f954 	bl	8000730 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800348a:	e009      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800348c:	f7fd f950 	bl	8000730 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d902      	bls.n	80034a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	73fb      	strb	r3, [r7, #15]
          break;
 800349e:	e005      	b.n	80034ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ef      	beq.n	800348c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	4904      	ldr	r1, [pc, #16]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000

080034d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034de:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d018      	beq.n	800351c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0203 	and.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d10d      	bne.n	8003516 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
       ||
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003502:	4b61      	ldr	r3, [pc, #388]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
       ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d047      	beq.n	80035a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	e044      	b.n	80035a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d018      	beq.n	8003556 <RCCEx_PLLSAI2_Config+0x86>
 8003524:	2b03      	cmp	r3, #3
 8003526:	d825      	bhi.n	8003574 <RCCEx_PLLSAI2_Config+0xa4>
 8003528:	2b01      	cmp	r3, #1
 800352a:	d002      	beq.n	8003532 <RCCEx_PLLSAI2_Config+0x62>
 800352c:	2b02      	cmp	r3, #2
 800352e:	d009      	beq.n	8003544 <RCCEx_PLLSAI2_Config+0x74>
 8003530:	e020      	b.n	8003574 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003532:	4b55      	ldr	r3, [pc, #340]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d11d      	bne.n	800357a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003542:	e01a      	b.n	800357a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	2b00      	cmp	r3, #0
 800354e:	d116      	bne.n	800357e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003554:	e013      	b.n	800357e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003556:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10f      	bne.n	8003582 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003562:	4b49      	ldr	r3, [pc, #292]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003572:	e006      	b.n	8003582 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      break;
 8003578:	e004      	b.n	8003584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003582:	bf00      	nop
    }

    if(status == HAL_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10d      	bne.n	80035a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800358a:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	430b      	orrs	r3, r1
 80035a0:	4939      	ldr	r1, [pc, #228]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d167      	bne.n	800367c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a35      	ldr	r2, [pc, #212]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b8:	f7fd f8ba 	bl	8000730 <HAL_GetTick>
 80035bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035be:	e009      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035c0:	f7fd f8b6 	bl	8000730 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d902      	bls.n	80035d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	73fb      	strb	r3, [r7, #15]
        break;
 80035d2:	e005      	b.n	80035e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ef      	bne.n	80035c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d14a      	bne.n	800367c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d111      	bne.n	8003610 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035ec:	4b26      	ldr	r3, [pc, #152]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6892      	ldr	r2, [r2, #8]
 80035fc:	0211      	lsls	r1, r2, #8
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68d2      	ldr	r2, [r2, #12]
 8003602:	0912      	lsrs	r2, r2, #4
 8003604:	0452      	lsls	r2, r2, #17
 8003606:	430a      	orrs	r2, r1
 8003608:	491f      	ldr	r1, [pc, #124]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	614b      	str	r3, [r1, #20]
 800360e:	e011      	b.n	8003634 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6892      	ldr	r2, [r2, #8]
 8003620:	0211      	lsls	r1, r2, #8
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6912      	ldr	r2, [r2, #16]
 8003626:	0852      	lsrs	r2, r2, #1
 8003628:	3a01      	subs	r2, #1
 800362a:	0652      	lsls	r2, r2, #25
 800362c:	430a      	orrs	r2, r1
 800362e:	4916      	ldr	r1, [pc, #88]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003630:	4313      	orrs	r3, r2
 8003632:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a13      	ldr	r2, [pc, #76]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fd f876 	bl	8000730 <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003646:	e009      	b.n	800365c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003648:	f7fd f872 	bl	8000730 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	73fb      	strb	r3, [r7, #15]
          break;
 800365a:	e005      	b.n	8003668 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ef      	beq.n	8003648 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4904      	ldr	r1, [pc, #16]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000

0800368c <__libc_init_array>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	4d0d      	ldr	r5, [pc, #52]	; (80036c4 <__libc_init_array+0x38>)
 8003690:	4c0d      	ldr	r4, [pc, #52]	; (80036c8 <__libc_init_array+0x3c>)
 8003692:	1b64      	subs	r4, r4, r5
 8003694:	10a4      	asrs	r4, r4, #2
 8003696:	2600      	movs	r6, #0
 8003698:	42a6      	cmp	r6, r4
 800369a:	d109      	bne.n	80036b0 <__libc_init_array+0x24>
 800369c:	4d0b      	ldr	r5, [pc, #44]	; (80036cc <__libc_init_array+0x40>)
 800369e:	4c0c      	ldr	r4, [pc, #48]	; (80036d0 <__libc_init_array+0x44>)
 80036a0:	f000 f82e 	bl	8003700 <_init>
 80036a4:	1b64      	subs	r4, r4, r5
 80036a6:	10a4      	asrs	r4, r4, #2
 80036a8:	2600      	movs	r6, #0
 80036aa:	42a6      	cmp	r6, r4
 80036ac:	d105      	bne.n	80036ba <__libc_init_array+0x2e>
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b4:	4798      	blx	r3
 80036b6:	3601      	adds	r6, #1
 80036b8:	e7ee      	b.n	8003698 <__libc_init_array+0xc>
 80036ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80036be:	4798      	blx	r3
 80036c0:	3601      	adds	r6, #1
 80036c2:	e7f2      	b.n	80036aa <__libc_init_array+0x1e>
 80036c4:	08003758 	.word	0x08003758
 80036c8:	08003758 	.word	0x08003758
 80036cc:	08003758 	.word	0x08003758
 80036d0:	0800375c 	.word	0x0800375c

080036d4 <memcpy>:
 80036d4:	440a      	add	r2, r1
 80036d6:	4291      	cmp	r1, r2
 80036d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80036dc:	d100      	bne.n	80036e0 <memcpy+0xc>
 80036de:	4770      	bx	lr
 80036e0:	b510      	push	{r4, lr}
 80036e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ea:	4291      	cmp	r1, r2
 80036ec:	d1f9      	bne.n	80036e2 <memcpy+0xe>
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <memset>:
 80036f0:	4402      	add	r2, r0
 80036f2:	4603      	mov	r3, r0
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d100      	bne.n	80036fa <memset+0xa>
 80036f8:	4770      	bx	lr
 80036fa:	f803 1b01 	strb.w	r1, [r3], #1
 80036fe:	e7f9      	b.n	80036f4 <memset+0x4>

08003700 <_init>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr

0800370c <_fini>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr
